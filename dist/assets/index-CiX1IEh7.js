(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const n of t)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function r(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerPolicy&&(n.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?n.credentials="include":t.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(t){if(t.ep)return;t.ep=!0;const n=r(t);fetch(t.href,n)}})();let g=null,D=null,m="";const M=()=>window.innerWidth<=768;if(M()){const e=document.getElementById("mobile-message");e?(e.style.display="flex",document.body.style.overflow="hidden",console.warn("Small screen detected. Redirecting user to desktop recommendation.")):console.error("[ERROR] Mobile message element not found in HTML.")}else console.log("Large screen detected. App is enabled.");const G=()=>{const e=document.getElementById("story-container");e?(e.style.display="block",e.style.visibility="visible",console.log("[DEBUG] Story container is visible.")):console.error("[ERROR] Story container not found.")},U=()=>{const e=document.getElementById("loading-overlay");console.log("[DEBUG] Showing loading overlay:",e),e?e.style.display="flex":console.error("[ERROR] Loading overlay not found.")},B=()=>{const e=document.getElementById("loading-overlay");console.log("[DEBUG] Hiding loading overlay:",e),e?e.style.display="none":console.error("[ERROR] Loading overlay not found.")};let u,b,y,f;const I=()=>{console.log("Loading background..."),new THREE.TextureLoader().load("/images/background.png",o=>{const r=new THREE.SphereGeometry(50,32,32),s=new THREE.MeshBasicMaterial({map:o,side:THREE.BackSide}),t=new THREE.Mesh(r,s);u.add(t),t.rotation.y=-Math.PI/-2,console.log("Background loaded successfully.")})},k=()=>{const e=document.createElement("div");e.id="buttons-container",document.body.appendChild(e),[{label:"Single Card",type:"single"},{label:"Three-Card Spread",type:"three"},{label:"Celtic Cross",type:"celtic"},{label:"Four-Card Spread",type:"four"},{label:"Horseshoe Spread",type:"horseshoe"}].forEach(r=>{const s=document.createElement("button");s.textContent=r.label,s.addEventListener("click",()=>F(r.type)),e.appendChild(s)})},P=()=>{console.log("Initializing app..."),G(),console.log("Initializing scene..."),u=new THREE.Scene,b=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),y=new THREE.WebGLRenderer({antialias:!0}),y.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(y.domElement),console.log("Adding lighting...");const e=new THREE.AmbientLight(16777215,1),o=new THREE.DirectionalLight(16777215,.5);o.position.set(5,10,7.5),u.add(e,o),f=new THREE.OrbitControls(b,y.domElement),f.enableDamping=!0,f.dampingFactor=.1,f.rotateSpeed=.3,b.position.z=10,I(),k(),y.domElement.addEventListener("mousemove",S),y.domElement.addEventListener("click",S),y.domElement.addEventListener("touchstart",S),console.log("Event listeners for tooltips attached."),H()},H=()=>{requestAnimationFrame(H),f.update(),y.render(u,b)};document.addEventListener("DOMContentLoaded",()=>{console.log("DOM fully loaded and parsed. Initializing app..."),P()});const E=[];new THREE.TextureLoader;let w={},O=!1;console.log("Fetching tarot descriptions...");fetch("tarot_descriptions.json").then(e=>e.json()).then(e=>{w=e,console.log("Tarot descriptions loaded:",w)}).catch(e=>console.error("Error loading tarot descriptions:",e));const $=async e=>{console.log("[DEBUG] Starting streamStoryResponse..."),g&&(console.log("[INFO] Aborting previous stream..."),g.abort()),D&&(console.log("[INFO] Clearing previous typewriter timeout..."),clearTimeout(D)),g=new AbortController,m="";const o=e.body.getReader(),r=new TextDecoder,s=document.getElementById("story-content");if(!s){console.error("[ERROR] Story container not found."),B();return}console.log("[DEBUG] Story container reset."),s.innerHTML="",s.style.color="white";const t=document.getElementById("story-container");t.style.display="block",t.style.visibility="visible",B(),console.log("[DEBUG] Variables reset.");let n=0;console.log("[DEBUG] Reading stream...");try{for(;;){const{value:i,done:R}=await o.read();if(R)break;const p=r.decode(i,{stream:!0});console.log("[DEBUG] Received chunk:",p),m+=p;let d;try{d=JSON.parse(m).story||m}catch{d=m}console.log("[DEBUG] Parsed story:",d);const x=()=>{n<d.length?(s.innerHTML+=d.charAt(n),n++,D=setTimeout(x,25)):console.log("[DEBUG] Typewriter complete.")};n===0&&(console.log("[DEBUG] Starting typewriter animation..."),x())}console.log("[DEBUG] Stream fully processed.")}catch(i){console.error("[ERROR] Failed to stream story:",i.message)}},A=async(e,o,r)=>{console.log("Loading selected cards:",e),E.forEach(i=>u.remove(i)),E.length=0;const s=new THREE.PlaneGeometry(2,3.5),t=new THREE.TextureLoader;let n=0;e.forEach((i,R)=>{const p=`${i}`;console.log(`[DEBUG] Loading card path: ${p}`),t.load(p,async d=>{const x=new THREE.MeshBasicMaterial({map:d,transparent:!0,side:THREE.DoubleSide}),c=new THREE.Mesh(s,x);let T={name:"Unknown",description:"No description available.",reversed:"No reversed description available."};if(Object.keys(w).forEach(v=>{w[v].forEach(a=>{a.image===i&&(T={name:a.name,description:a.description,reversed:a.reversed})})}),console.log(`[DEBUG] Bound data to card: ${T.name}`),c.userData=T,c.position.set(0,0,-10),c.rotation.set(0,Math.PI,0),Math.random()<.25&&(c.rotation.x=Math.PI),u.add(c),E.push(c),gsap.fromTo(c.position,{x:0,y:0,z:-20},{x:o[R].x,y:o[R].y,z:0,duration:1.5,ease:"power2.out"}),gsap.fromTo(c.rotation,{y:Math.PI*2},{y:0,duration:1.5,ease:"power2.out"}),n++,n===e.length){O=!0,console.log("[DEBUG] Loading complete.");const v=E.map(a=>({name:a.userData.name,description:a.userData.description,reversed:a.userData.reversed}));console.log("[DEBUG] Sending Cards Data:",v),U(),fetch("/.netlify/functions/generate-tarot-story",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({spreadType:r,cards:v})}).then(a=>{$(a)}).catch(a=>{console.error("[ERROR] Failed to fetch story:",a.message),B()})}},void 0,d=>{console.error(`[ERROR] Failed to load texture: ${p}`,d)})})},h=e=>{console.log(`Selecting ${e} random cards...`);const o=Object.values(w).flatMap(t=>t.map(n=>n.image)),r=[],s=[];for(;s.length<e;){const t=Math.floor(Math.random()*o.length);s.includes(t)||(s.push(t),r.push(o[t]))}return console.log("Selected cards:",r),r},F=e=>{console.log(`Handling spread: ${e}`),g&&(console.log("[INFO] Aborting previous stream..."),g.abort()),g=new AbortController,g.signal;let o=[],r=[];e==="single"?(o=h(1),r=[{x:0,y:0}]):e==="three"?(o=h(3),r=[{x:-5,y:0},{x:0,y:0},{x:5,y:0}]):e==="four"?(o=h(4),r=[{x:-3,y:2},{x:0,y:2},{x:3,y:2},{x:0,y:-2}]):e==="celtic"?(o=h(10),r=[{x:0,y:0},{x:0,y:-2},{x:-3,y:0},{x:3,y:0},{x:0,y:-4},{x:0,y:4},{x:-6,y:2},{x:6,y:2},{x:-6,y:-2},{x:6,y:-2}]):e==="horseshoe"&&(o=h(7),r=[{x:0,y:5},{x:-6,y:3},{x:-3,y:0},{x:0,y:-2},{x:3,y:0},{x:6,y:3},{x:0,y:-6}]),A(o,r,e)},L=new THREE.Raycaster,C=new THREE.Vector2,l=document.createElement("div");l.id="tooltip";l.style.position="absolute";l.style.backgroundColor="rgba(0, 0, 0, 0.7)";l.style.color="white";l.style.padding="10px";l.style.borderRadius="5px";l.style.display="none";l.style.zIndex="1000";l.style.maxWidth="300px";document.body.appendChild(l);const N=(e,o,r,s,t,n)=>{l.style.left=`${s+10}px`,l.style.top=`${t+10}px`,l.style.display="block",l.innerHTML=`
        <strong>${e}</strong><br/>
        <strong>${n?"Reversed:":"Upright:"}</strong> 
        ${n?r:o}
    `;const i=l.getBoundingClientRect();i.right>window.innerWidth&&(l.style.left=`${window.innerWidth-i.width-10}px`),i.bottom>window.innerHeight&&(l.style.top=`${window.innerHeight-i.height-10}px`)},j=()=>{l.style.display="none"},S=e=>{if(!O)return;const o=y.domElement.getBoundingClientRect();let r,s;e.type==="touchstart"?(e.preventDefault(),r=e.touches[0].clientX,s=e.touches[0].clientY):(r=e.clientX,s=e.clientY),C.x=(r-o.left)/o.width*2-1,C.y=-((s-o.top)/o.height)*2+1,L.setFromCamera(C,b);const t=L.intersectObjects(E);if(t.length>0){const n=t[0].object,i=Math.abs(n.rotation.x)>.1;e.type==="mousemove"?N(n.userData.name,n.userData.description,n.userData.reversed,r,s,i):e.type==="click"&&console.log("Clicked card:",n.userData.name)}else j()};
